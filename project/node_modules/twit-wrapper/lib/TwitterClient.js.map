{"version":3,"sources":["../src/TwitterClient.js"],"names":["Twit","require","TwitterClient","constructor","consumerAPIKey","consumerAPISecretKey","accessToken","accessTokenSecret","timeout","strictSSL","twit","consumer_key","consumer_secret","access_token","access_token_secret","timeout_ms","postTweet","msg","Promise","resolve","reject","url","params","status","post","then","res","tweet","data","tweet_created_at","created_at","tweet_user_name","user","name","tweet_user_screen_name","screen_name","tweet_text_length","text","length","tweet_text","catch","err","getTweets","keyword","fromDate","lang","maxResults","q","count","get","tweets","statuses","tweetsMap","map","user_name","user_screen_name","tweet_retweeted_status_text","retweeted_status","module","exports"],"mappings":"AAAA,MAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,cACEC,cADF,EAEEC,oBAFF,EAGEC,WAHF,EAIEC,iBAJF,EAKEC,UAAU,KALZ,EAMEC,YAAY,IANd,EAOE;AACA,SAAKC,IAAL,GAAY,IAAIV,IAAJ,CAAS;AACnBW,oBAAcP,cADK;AAEnBQ,uBAAiBP,oBAFE;AAGnBQ,oBAAcP,WAHK;AAInBQ,2BAAqBP,iBAJF;AAKnBQ,kBAAYP,OALO;AAMnBC;AANmB,KAAT,CAAZ;AAQD;;AAED;AACAO,YAAUC,GAAV,EAAe;AACb,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAM,iBAAZ;AACA,YAAMC,SAAS,EAAEC,QAAS,GAAEN,GAAI,EAAjB,EAAf;AACA,WAAKP,IAAL,CACGc,IADH,CACQH,GADR,EACaC,MADb,EAEGG,IAFH,CAEQC,OAAO;AACX,cAAMC,QAAQD,IAAIE,IAAlB;AACAT,gBAAQ;AACNU,4BAAkBF,MAAMG,UADlB;AAENC,2BAAiBJ,MAAMK,IAAN,CAAWC,IAFtB;AAGNC,kCAAwBP,MAAMK,IAAN,CAAWG,WAH7B;AAINC,6BAAmBT,MAAMU,IAAN,CAAWC,MAJxB;AAKNC,sBAAYZ,MAAMU;AALZ,SAAR;AAOD,OAXH,EAYGG,KAZH,CAYSC,OAAO;AACZrB,eAAOqB,GAAP;AACD,OAdH;AAeD,KAlBM,CAAP;AAmBD;;AAED;AACA;AACA;AACA;AACAC,YAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,OAAO,IAApC,EAA0CC,aAAa,GAAvD,EAA4D;AAC1D,WAAO,IAAI5B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,MAAM,eAAZ;AACA,YAAMC,SAAS,EAAEyB,GAAI,GAAEJ,OAAQ,UAASC,QAAS,EAAlC,EAAqCI,OAAOF,UAA5C,EAAwDD,IAAxD,EAAf;AACA,WAAKnC,IAAL,CACGuC,GADH,CACO5B,GADP,EACYC,MADZ,EAEGG,IAFH,CAEQC,OAAO;AACX,cAAMwB,SAASxB,IAAIE,IAAJ,CAASuB,QAAxB;AACA,cAAMC,YAAYF,OAAOG,GAAP,CAAW1B,UAAU;AACrCG,sBAAYH,MAAMG,UADmB;AAErCwB,qBAAW3B,MAAMK,IAAN,CAAWC,IAFe;AAGrCsB,4BAAkB5B,MAAMK,IAAN,CAAWG,WAHQ;AAIrCI,sBAAYZ,MAAMU,IAJmB;AAKrCmB,uCAA6B7B,MAAM8B,gBAAN,GACzB9B,MAAM8B,gBAAN,CAAuBpB,IADE,GAEzB;AAPiC,SAAV,CAAX,CAAlB;AASAlB,gBAAQiC,SAAR;AACD,OAdH,EAeGZ,KAfH,CAeSC,OAAO;AACZrB,eAAOqB,GAAP;AACD,OAjBH;AAkBD,KArBM,CAAP;AAsBD;AArEiB;;AAwEpBiB,OAAOC,OAAP,GAAiBzD,aAAjB","file":"TwitterClient.js","sourcesContent":["const Twit = require('twit');\n\nclass TwitterClient {\n  constructor(\n    consumerAPIKey,\n    consumerAPISecretKey,\n    accessToken,\n    accessTokenSecret,\n    timeout = 60000,\n    strictSSL = true,\n  ) {\n    this.twit = new Twit({\n      consumer_key: consumerAPIKey,\n      consumer_secret: consumerAPISecretKey,\n      access_token: accessToken,\n      access_token_secret: accessTokenSecret,\n      timeout_ms: timeout,\n      strictSSL,\n    });\n  }\n\n  // Methods\n  postTweet(msg) {\n    return new Promise((resolve, reject) => {\n      const url = 'statuses/update';\n      const params = { status: `${msg}` };\n      this.twit\n        .post(url, params)\n        .then(res => {\n          const tweet = res.data;\n          resolve({\n            tweet_created_at: tweet.created_at,\n            tweet_user_name: tweet.user.name,\n            tweet_user_screen_name: tweet.user.screen_name,\n            tweet_text_length: tweet.text.length,\n            tweet_text: tweet.text,\n          });\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n\n  // Return tweets containing the keyword since fromDate param.\n  // Filter:\n  // - default language is English.\n  // - Limit result to 100 tweets (maximum)\n  getTweets(keyword, fromDate, lang = 'en', maxResults = 100) {\n    return new Promise((resolve, reject) => {\n      const url = 'search/tweets';\n      const params = { q: `${keyword} since:${fromDate}`, count: maxResults, lang };\n      this.twit\n        .get(url, params)\n        .then(res => {\n          const tweets = res.data.statuses;\n          const tweetsMap = tweets.map(tweet => ({\n            created_at: tweet.created_at,\n            user_name: tweet.user.name,\n            user_screen_name: tweet.user.screen_name,\n            tweet_text: tweet.text,\n            tweet_retweeted_status_text: tweet.retweeted_status\n              ? tweet.retweeted_status.text\n              : null,\n          }));\n          resolve(tweetsMap);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n}\n\nmodule.exports = TwitterClient;\n"]}